/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ensah.telecom.events;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Represents a short message service (SMS) call detail record (CDR) with relevant information. */
@org.apache.avro.specific.AvroGenerated
public class SMSCDR extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4594271598029382497L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SMSCDR\",\"namespace\":\"com.ensah.telecom.events\",\"doc\":\"Represents a short message service (SMS) call detail record (CDR) with relevant information.\",\"fields\":[{\"name\":\"record_type\",\"type\":\"string\",\"doc\":\"Type of the record (e.g., 'sms')\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Timestamp of the record\"},{\"name\":\"sender_id\",\"type\":\"string\",\"doc\":\"ID of the sender\"},{\"name\":\"receiver_id\",\"type\":\"string\",\"doc\":\"ID of the receiver\"},{\"name\":\"cell_id\",\"type\":\"string\",\"doc\":\"ID of the cell tower used\"},{\"name\":\"technology\",\"type\":\"string\",\"doc\":\"Technology used (e.g., '2G', '3G', '4G', '5G')\"},{\"name\":\"uuid\",\"type\":\"string\",\"doc\":\"Unique identifier for the SMS record\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<SMSCDR> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SMSCDR> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SMSCDR> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SMSCDR> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SMSCDR> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SMSCDR to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SMSCDR from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SMSCDR instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SMSCDR fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Type of the record (e.g., 'sms') */
  private java.lang.CharSequence record_type;
  /** Timestamp of the record */
  private java.time.Instant timestamp;
  /** ID of the sender */
  private java.lang.CharSequence sender_id;
  /** ID of the receiver */
  private java.lang.CharSequence receiver_id;
  /** ID of the cell tower used */
  private java.lang.CharSequence cell_id;
  /** Technology used (e.g., '2G', '3G', '4G', '5G') */
  private java.lang.CharSequence technology;
  /** Unique identifier for the SMS record */
  private java.lang.CharSequence uuid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SMSCDR() {}

  /**
   * All-args constructor.
   * @param record_type Type of the record (e.g., 'sms')
   * @param timestamp Timestamp of the record
   * @param sender_id ID of the sender
   * @param receiver_id ID of the receiver
   * @param cell_id ID of the cell tower used
   * @param technology Technology used (e.g., '2G', '3G', '4G', '5G')
   * @param uuid Unique identifier for the SMS record
   */
  public SMSCDR(java.lang.CharSequence record_type, java.time.Instant timestamp, java.lang.CharSequence sender_id, java.lang.CharSequence receiver_id, java.lang.CharSequence cell_id, java.lang.CharSequence technology, java.lang.CharSequence uuid) {
    this.record_type = record_type;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.sender_id = sender_id;
    this.receiver_id = receiver_id;
    this.cell_id = cell_id;
    this.technology = technology;
    this.uuid = uuid;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return record_type;
    case 1: return timestamp;
    case 2: return sender_id;
    case 3: return receiver_id;
    case 4: return cell_id;
    case 5: return technology;
    case 6: return uuid;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: record_type = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.time.Instant)value$; break;
    case 2: sender_id = (java.lang.CharSequence)value$; break;
    case 3: receiver_id = (java.lang.CharSequence)value$; break;
    case 4: cell_id = (java.lang.CharSequence)value$; break;
    case 5: technology = (java.lang.CharSequence)value$; break;
    case 6: uuid = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'record_type' field.
   * @return Type of the record (e.g., 'sms')
   */
  public java.lang.CharSequence getRecordType() {
    return record_type;
  }


  /**
   * Sets the value of the 'record_type' field.
   * Type of the record (e.g., 'sms')
   * @param value the value to set.
   */
  public void setRecordType(java.lang.CharSequence value) {
    this.record_type = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp of the record
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp of the record
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'sender_id' field.
   * @return ID of the sender
   */
  public java.lang.CharSequence getSenderId() {
    return sender_id;
  }


  /**
   * Sets the value of the 'sender_id' field.
   * ID of the sender
   * @param value the value to set.
   */
  public void setSenderId(java.lang.CharSequence value) {
    this.sender_id = value;
  }

  /**
   * Gets the value of the 'receiver_id' field.
   * @return ID of the receiver
   */
  public java.lang.CharSequence getReceiverId() {
    return receiver_id;
  }


  /**
   * Sets the value of the 'receiver_id' field.
   * ID of the receiver
   * @param value the value to set.
   */
  public void setReceiverId(java.lang.CharSequence value) {
    this.receiver_id = value;
  }

  /**
   * Gets the value of the 'cell_id' field.
   * @return ID of the cell tower used
   */
  public java.lang.CharSequence getCellId() {
    return cell_id;
  }


  /**
   * Sets the value of the 'cell_id' field.
   * ID of the cell tower used
   * @param value the value to set.
   */
  public void setCellId(java.lang.CharSequence value) {
    this.cell_id = value;
  }

  /**
   * Gets the value of the 'technology' field.
   * @return Technology used (e.g., '2G', '3G', '4G', '5G')
   */
  public java.lang.CharSequence getTechnology() {
    return technology;
  }


  /**
   * Sets the value of the 'technology' field.
   * Technology used (e.g., '2G', '3G', '4G', '5G')
   * @param value the value to set.
   */
  public void setTechnology(java.lang.CharSequence value) {
    this.technology = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return Unique identifier for the SMS record
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * Unique identifier for the SMS record
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Creates a new SMSCDR RecordBuilder.
   * @return A new SMSCDR RecordBuilder
   */
  public static com.ensah.telecom.events.SMSCDR.Builder newBuilder() {
    return new com.ensah.telecom.events.SMSCDR.Builder();
  }

  /**
   * Creates a new SMSCDR RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SMSCDR RecordBuilder
   */
  public static com.ensah.telecom.events.SMSCDR.Builder newBuilder(com.ensah.telecom.events.SMSCDR.Builder other) {
    if (other == null) {
      return new com.ensah.telecom.events.SMSCDR.Builder();
    } else {
      return new com.ensah.telecom.events.SMSCDR.Builder(other);
    }
  }

  /**
   * Creates a new SMSCDR RecordBuilder by copying an existing SMSCDR instance.
   * @param other The existing instance to copy.
   * @return A new SMSCDR RecordBuilder
   */
  public static com.ensah.telecom.events.SMSCDR.Builder newBuilder(com.ensah.telecom.events.SMSCDR other) {
    if (other == null) {
      return new com.ensah.telecom.events.SMSCDR.Builder();
    } else {
      return new com.ensah.telecom.events.SMSCDR.Builder(other);
    }
  }

  /**
   * RecordBuilder for SMSCDR instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SMSCDR>
    implements org.apache.avro.data.RecordBuilder<SMSCDR> {

    /** Type of the record (e.g., 'sms') */
    private java.lang.CharSequence record_type;
    /** Timestamp of the record */
    private java.time.Instant timestamp;
    /** ID of the sender */
    private java.lang.CharSequence sender_id;
    /** ID of the receiver */
    private java.lang.CharSequence receiver_id;
    /** ID of the cell tower used */
    private java.lang.CharSequence cell_id;
    /** Technology used (e.g., '2G', '3G', '4G', '5G') */
    private java.lang.CharSequence technology;
    /** Unique identifier for the SMS record */
    private java.lang.CharSequence uuid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ensah.telecom.events.SMSCDR.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.record_type)) {
        this.record_type = data().deepCopy(fields()[0].schema(), other.record_type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sender_id)) {
        this.sender_id = data().deepCopy(fields()[2].schema(), other.sender_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.receiver_id)) {
        this.receiver_id = data().deepCopy(fields()[3].schema(), other.receiver_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.cell_id)) {
        this.cell_id = data().deepCopy(fields()[4].schema(), other.cell_id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.technology)) {
        this.technology = data().deepCopy(fields()[5].schema(), other.technology);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.uuid)) {
        this.uuid = data().deepCopy(fields()[6].schema(), other.uuid);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing SMSCDR instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ensah.telecom.events.SMSCDR other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.record_type)) {
        this.record_type = data().deepCopy(fields()[0].schema(), other.record_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sender_id)) {
        this.sender_id = data().deepCopy(fields()[2].schema(), other.sender_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.receiver_id)) {
        this.receiver_id = data().deepCopy(fields()[3].schema(), other.receiver_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.cell_id)) {
        this.cell_id = data().deepCopy(fields()[4].schema(), other.cell_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.technology)) {
        this.technology = data().deepCopy(fields()[5].schema(), other.technology);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.uuid)) {
        this.uuid = data().deepCopy(fields()[6].schema(), other.uuid);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'record_type' field.
      * Type of the record (e.g., 'sms')
      * @return The value.
      */
    public java.lang.CharSequence getRecordType() {
      return record_type;
    }


    /**
      * Sets the value of the 'record_type' field.
      * Type of the record (e.g., 'sms')
      * @param value The value of 'record_type'.
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder setRecordType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.record_type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'record_type' field has been set.
      * Type of the record (e.g., 'sms')
      * @return True if the 'record_type' field has been set, false otherwise.
      */
    public boolean hasRecordType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'record_type' field.
      * Type of the record (e.g., 'sms')
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder clearRecordType() {
      record_type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp of the record
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp of the record
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[1], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp of the record
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp of the record
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sender_id' field.
      * ID of the sender
      * @return The value.
      */
    public java.lang.CharSequence getSenderId() {
      return sender_id;
    }


    /**
      * Sets the value of the 'sender_id' field.
      * ID of the sender
      * @param value The value of 'sender_id'.
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder setSenderId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sender_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sender_id' field has been set.
      * ID of the sender
      * @return True if the 'sender_id' field has been set, false otherwise.
      */
    public boolean hasSenderId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sender_id' field.
      * ID of the sender
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder clearSenderId() {
      sender_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiver_id' field.
      * ID of the receiver
      * @return The value.
      */
    public java.lang.CharSequence getReceiverId() {
      return receiver_id;
    }


    /**
      * Sets the value of the 'receiver_id' field.
      * ID of the receiver
      * @param value The value of 'receiver_id'.
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder setReceiverId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.receiver_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'receiver_id' field has been set.
      * ID of the receiver
      * @return True if the 'receiver_id' field has been set, false otherwise.
      */
    public boolean hasReceiverId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'receiver_id' field.
      * ID of the receiver
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder clearReceiverId() {
      receiver_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'cell_id' field.
      * ID of the cell tower used
      * @return The value.
      */
    public java.lang.CharSequence getCellId() {
      return cell_id;
    }


    /**
      * Sets the value of the 'cell_id' field.
      * ID of the cell tower used
      * @param value The value of 'cell_id'.
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder setCellId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.cell_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'cell_id' field has been set.
      * ID of the cell tower used
      * @return True if the 'cell_id' field has been set, false otherwise.
      */
    public boolean hasCellId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'cell_id' field.
      * ID of the cell tower used
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder clearCellId() {
      cell_id = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'technology' field.
      * Technology used (e.g., '2G', '3G', '4G', '5G')
      * @return The value.
      */
    public java.lang.CharSequence getTechnology() {
      return technology;
    }


    /**
      * Sets the value of the 'technology' field.
      * Technology used (e.g., '2G', '3G', '4G', '5G')
      * @param value The value of 'technology'.
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder setTechnology(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.technology = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'technology' field has been set.
      * Technology used (e.g., '2G', '3G', '4G', '5G')
      * @return True if the 'technology' field has been set, false otherwise.
      */
    public boolean hasTechnology() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'technology' field.
      * Technology used (e.g., '2G', '3G', '4G', '5G')
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder clearTechnology() {
      technology = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * Unique identifier for the SMS record
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * Unique identifier for the SMS record
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.uuid = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * Unique identifier for the SMS record
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'uuid' field.
      * Unique identifier for the SMS record
      * @return This builder.
      */
    public com.ensah.telecom.events.SMSCDR.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SMSCDR build() {
      try {
        SMSCDR record = new SMSCDR();
        record.record_type = fieldSetFlags()[0] ? this.record_type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.time.Instant) defaultValue(fields()[1]);
        record.sender_id = fieldSetFlags()[2] ? this.sender_id : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.receiver_id = fieldSetFlags()[3] ? this.receiver_id : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.cell_id = fieldSetFlags()[4] ? this.cell_id : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.technology = fieldSetFlags()[5] ? this.technology : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.uuid = fieldSetFlags()[6] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SMSCDR>
    WRITER$ = (org.apache.avro.io.DatumWriter<SMSCDR>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SMSCDR>
    READER$ = (org.apache.avro.io.DatumReader<SMSCDR>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










