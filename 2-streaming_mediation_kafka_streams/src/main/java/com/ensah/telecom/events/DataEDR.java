/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ensah.telecom.events;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Represents a data event detail record (EDR) with relevant information. */
@org.apache.avro.specific.AvroGenerated
public class DataEDR extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3084087778964205681L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataEDR\",\"namespace\":\"com.ensah.telecom.events\",\"doc\":\"Represents a data event detail record (EDR) with relevant information.\",\"fields\":[{\"name\":\"record_type\",\"type\":\"string\",\"doc\":\"Type of the record (e.g., 'data')\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Timestamp of the record\"},{\"name\":\"user_id\",\"type\":\"string\",\"doc\":\"ID of the user\"},{\"name\":\"data_volume_mb\",\"type\":\"double\",\"doc\":\"Volume of data used in megabytes\"},{\"name\":\"session_duration_sec\",\"type\":\"int\",\"doc\":\"Duration of the session in seconds\"},{\"name\":\"cell_id\",\"type\":\"string\",\"doc\":\"ID of the cell tower used\"},{\"name\":\"technology\",\"type\":\"string\",\"doc\":\"Technology used (e.g., 'GPRS', 'LTE')\"},{\"name\":\"uuid\",\"type\":\"string\",\"doc\":\"Unique identifier for the data record\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<DataEDR> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DataEDR> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DataEDR> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DataEDR> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DataEDR> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DataEDR to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DataEDR from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DataEDR instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DataEDR fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Type of the record (e.g., 'data') */
  private java.lang.CharSequence record_type;
  /** Timestamp of the record */
  private java.time.Instant timestamp;
  /** ID of the user */
  private java.lang.CharSequence user_id;
  /** Volume of data used in megabytes */
  private double data_volume_mb;
  /** Duration of the session in seconds */
  private int session_duration_sec;
  /** ID of the cell tower used */
  private java.lang.CharSequence cell_id;
  /** Technology used (e.g., 'GPRS', 'LTE') */
  private java.lang.CharSequence technology;
  /** Unique identifier for the data record */
  private java.lang.CharSequence uuid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataEDR() {}

  /**
   * All-args constructor.
   * @param record_type Type of the record (e.g., 'data')
   * @param timestamp Timestamp of the record
   * @param user_id ID of the user
   * @param data_volume_mb Volume of data used in megabytes
   * @param session_duration_sec Duration of the session in seconds
   * @param cell_id ID of the cell tower used
   * @param technology Technology used (e.g., 'GPRS', 'LTE')
   * @param uuid Unique identifier for the data record
   */
  public DataEDR(java.lang.CharSequence record_type, java.time.Instant timestamp, java.lang.CharSequence user_id, java.lang.Double data_volume_mb, java.lang.Integer session_duration_sec, java.lang.CharSequence cell_id, java.lang.CharSequence technology, java.lang.CharSequence uuid) {
    this.record_type = record_type;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.user_id = user_id;
    this.data_volume_mb = data_volume_mb;
    this.session_duration_sec = session_duration_sec;
    this.cell_id = cell_id;
    this.technology = technology;
    this.uuid = uuid;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return record_type;
    case 1: return timestamp;
    case 2: return user_id;
    case 3: return data_volume_mb;
    case 4: return session_duration_sec;
    case 5: return cell_id;
    case 6: return technology;
    case 7: return uuid;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: record_type = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.time.Instant)value$; break;
    case 2: user_id = (java.lang.CharSequence)value$; break;
    case 3: data_volume_mb = (java.lang.Double)value$; break;
    case 4: session_duration_sec = (java.lang.Integer)value$; break;
    case 5: cell_id = (java.lang.CharSequence)value$; break;
    case 6: technology = (java.lang.CharSequence)value$; break;
    case 7: uuid = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'record_type' field.
   * @return Type of the record (e.g., 'data')
   */
  public java.lang.CharSequence getRecordType() {
    return record_type;
  }


  /**
   * Sets the value of the 'record_type' field.
   * Type of the record (e.g., 'data')
   * @param value the value to set.
   */
  public void setRecordType(java.lang.CharSequence value) {
    this.record_type = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp of the record
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp of the record
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return ID of the user
   */
  public java.lang.CharSequence getUserId() {
    return user_id;
  }


  /**
   * Sets the value of the 'user_id' field.
   * ID of the user
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'data_volume_mb' field.
   * @return Volume of data used in megabytes
   */
  public double getDataVolumeMb() {
    return data_volume_mb;
  }


  /**
   * Sets the value of the 'data_volume_mb' field.
   * Volume of data used in megabytes
   * @param value the value to set.
   */
  public void setDataVolumeMb(double value) {
    this.data_volume_mb = value;
  }

  /**
   * Gets the value of the 'session_duration_sec' field.
   * @return Duration of the session in seconds
   */
  public int getSessionDurationSec() {
    return session_duration_sec;
  }


  /**
   * Sets the value of the 'session_duration_sec' field.
   * Duration of the session in seconds
   * @param value the value to set.
   */
  public void setSessionDurationSec(int value) {
    this.session_duration_sec = value;
  }

  /**
   * Gets the value of the 'cell_id' field.
   * @return ID of the cell tower used
   */
  public java.lang.CharSequence getCellId() {
    return cell_id;
  }


  /**
   * Sets the value of the 'cell_id' field.
   * ID of the cell tower used
   * @param value the value to set.
   */
  public void setCellId(java.lang.CharSequence value) {
    this.cell_id = value;
  }

  /**
   * Gets the value of the 'technology' field.
   * @return Technology used (e.g., 'GPRS', 'LTE')
   */
  public java.lang.CharSequence getTechnology() {
    return technology;
  }


  /**
   * Sets the value of the 'technology' field.
   * Technology used (e.g., 'GPRS', 'LTE')
   * @param value the value to set.
   */
  public void setTechnology(java.lang.CharSequence value) {
    this.technology = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return Unique identifier for the data record
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * Unique identifier for the data record
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Creates a new DataEDR RecordBuilder.
   * @return A new DataEDR RecordBuilder
   */
  public static com.ensah.telecom.events.DataEDR.Builder newBuilder() {
    return new com.ensah.telecom.events.DataEDR.Builder();
  }

  /**
   * Creates a new DataEDR RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataEDR RecordBuilder
   */
  public static com.ensah.telecom.events.DataEDR.Builder newBuilder(com.ensah.telecom.events.DataEDR.Builder other) {
    if (other == null) {
      return new com.ensah.telecom.events.DataEDR.Builder();
    } else {
      return new com.ensah.telecom.events.DataEDR.Builder(other);
    }
  }

  /**
   * Creates a new DataEDR RecordBuilder by copying an existing DataEDR instance.
   * @param other The existing instance to copy.
   * @return A new DataEDR RecordBuilder
   */
  public static com.ensah.telecom.events.DataEDR.Builder newBuilder(com.ensah.telecom.events.DataEDR other) {
    if (other == null) {
      return new com.ensah.telecom.events.DataEDR.Builder();
    } else {
      return new com.ensah.telecom.events.DataEDR.Builder(other);
    }
  }

  /**
   * RecordBuilder for DataEDR instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataEDR>
    implements org.apache.avro.data.RecordBuilder<DataEDR> {

    /** Type of the record (e.g., 'data') */
    private java.lang.CharSequence record_type;
    /** Timestamp of the record */
    private java.time.Instant timestamp;
    /** ID of the user */
    private java.lang.CharSequence user_id;
    /** Volume of data used in megabytes */
    private double data_volume_mb;
    /** Duration of the session in seconds */
    private int session_duration_sec;
    /** ID of the cell tower used */
    private java.lang.CharSequence cell_id;
    /** Technology used (e.g., 'GPRS', 'LTE') */
    private java.lang.CharSequence technology;
    /** Unique identifier for the data record */
    private java.lang.CharSequence uuid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ensah.telecom.events.DataEDR.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.record_type)) {
        this.record_type = data().deepCopy(fields()[0].schema(), other.record_type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.user_id)) {
        this.user_id = data().deepCopy(fields()[2].schema(), other.user_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.data_volume_mb)) {
        this.data_volume_mb = data().deepCopy(fields()[3].schema(), other.data_volume_mb);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.session_duration_sec)) {
        this.session_duration_sec = data().deepCopy(fields()[4].schema(), other.session_duration_sec);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.cell_id)) {
        this.cell_id = data().deepCopy(fields()[5].schema(), other.cell_id);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.technology)) {
        this.technology = data().deepCopy(fields()[6].schema(), other.technology);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.uuid)) {
        this.uuid = data().deepCopy(fields()[7].schema(), other.uuid);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing DataEDR instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ensah.telecom.events.DataEDR other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.record_type)) {
        this.record_type = data().deepCopy(fields()[0].schema(), other.record_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user_id)) {
        this.user_id = data().deepCopy(fields()[2].schema(), other.user_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.data_volume_mb)) {
        this.data_volume_mb = data().deepCopy(fields()[3].schema(), other.data_volume_mb);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.session_duration_sec)) {
        this.session_duration_sec = data().deepCopy(fields()[4].schema(), other.session_duration_sec);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cell_id)) {
        this.cell_id = data().deepCopy(fields()[5].schema(), other.cell_id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.technology)) {
        this.technology = data().deepCopy(fields()[6].schema(), other.technology);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.uuid)) {
        this.uuid = data().deepCopy(fields()[7].schema(), other.uuid);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'record_type' field.
      * Type of the record (e.g., 'data')
      * @return The value.
      */
    public java.lang.CharSequence getRecordType() {
      return record_type;
    }


    /**
      * Sets the value of the 'record_type' field.
      * Type of the record (e.g., 'data')
      * @param value The value of 'record_type'.
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder setRecordType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.record_type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'record_type' field has been set.
      * Type of the record (e.g., 'data')
      * @return True if the 'record_type' field has been set, false otherwise.
      */
    public boolean hasRecordType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'record_type' field.
      * Type of the record (e.g., 'data')
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder clearRecordType() {
      record_type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp of the record
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp of the record
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[1], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp of the record
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp of the record
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * ID of the user
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return user_id;
    }


    /**
      * Sets the value of the 'user_id' field.
      * ID of the user
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.user_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * ID of the user
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'user_id' field.
      * ID of the user
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'data_volume_mb' field.
      * Volume of data used in megabytes
      * @return The value.
      */
    public double getDataVolumeMb() {
      return data_volume_mb;
    }


    /**
      * Sets the value of the 'data_volume_mb' field.
      * Volume of data used in megabytes
      * @param value The value of 'data_volume_mb'.
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder setDataVolumeMb(double value) {
      validate(fields()[3], value);
      this.data_volume_mb = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'data_volume_mb' field has been set.
      * Volume of data used in megabytes
      * @return True if the 'data_volume_mb' field has been set, false otherwise.
      */
    public boolean hasDataVolumeMb() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'data_volume_mb' field.
      * Volume of data used in megabytes
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder clearDataVolumeMb() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'session_duration_sec' field.
      * Duration of the session in seconds
      * @return The value.
      */
    public int getSessionDurationSec() {
      return session_duration_sec;
    }


    /**
      * Sets the value of the 'session_duration_sec' field.
      * Duration of the session in seconds
      * @param value The value of 'session_duration_sec'.
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder setSessionDurationSec(int value) {
      validate(fields()[4], value);
      this.session_duration_sec = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'session_duration_sec' field has been set.
      * Duration of the session in seconds
      * @return True if the 'session_duration_sec' field has been set, false otherwise.
      */
    public boolean hasSessionDurationSec() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'session_duration_sec' field.
      * Duration of the session in seconds
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder clearSessionDurationSec() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'cell_id' field.
      * ID of the cell tower used
      * @return The value.
      */
    public java.lang.CharSequence getCellId() {
      return cell_id;
    }


    /**
      * Sets the value of the 'cell_id' field.
      * ID of the cell tower used
      * @param value The value of 'cell_id'.
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder setCellId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.cell_id = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'cell_id' field has been set.
      * ID of the cell tower used
      * @return True if the 'cell_id' field has been set, false otherwise.
      */
    public boolean hasCellId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'cell_id' field.
      * ID of the cell tower used
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder clearCellId() {
      cell_id = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'technology' field.
      * Technology used (e.g., 'GPRS', 'LTE')
      * @return The value.
      */
    public java.lang.CharSequence getTechnology() {
      return technology;
    }


    /**
      * Sets the value of the 'technology' field.
      * Technology used (e.g., 'GPRS', 'LTE')
      * @param value The value of 'technology'.
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder setTechnology(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.technology = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'technology' field has been set.
      * Technology used (e.g., 'GPRS', 'LTE')
      * @return True if the 'technology' field has been set, false otherwise.
      */
    public boolean hasTechnology() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'technology' field.
      * Technology used (e.g., 'GPRS', 'LTE')
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder clearTechnology() {
      technology = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * Unique identifier for the data record
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * Unique identifier for the data record
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.uuid = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * Unique identifier for the data record
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'uuid' field.
      * Unique identifier for the data record
      * @return This builder.
      */
    public com.ensah.telecom.events.DataEDR.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DataEDR build() {
      try {
        DataEDR record = new DataEDR();
        record.record_type = fieldSetFlags()[0] ? this.record_type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.time.Instant) defaultValue(fields()[1]);
        record.user_id = fieldSetFlags()[2] ? this.user_id : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.data_volume_mb = fieldSetFlags()[3] ? this.data_volume_mb : (java.lang.Double) defaultValue(fields()[3]);
        record.session_duration_sec = fieldSetFlags()[4] ? this.session_duration_sec : (java.lang.Integer) defaultValue(fields()[4]);
        record.cell_id = fieldSetFlags()[5] ? this.cell_id : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.technology = fieldSetFlags()[6] ? this.technology : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.uuid = fieldSetFlags()[7] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DataEDR>
    WRITER$ = (org.apache.avro.io.DatumWriter<DataEDR>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DataEDR>
    READER$ = (org.apache.avro.io.DatumReader<DataEDR>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










